// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    password,
    last_login
) VALUES (
    $1,$2,$3,$4
) RETURNING id, avatar, username, name, email, password, phone, gender, birth_date, created_at, last_login, is_deleted
`

type CreateUserParams struct {
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	LastLogin time.Time `json:"last_login"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.LastLogin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Avatar,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.LastLogin,
		&i.IsDeleted,
	)
	return i, err
}

const createUserLocation = `-- name: CreateUserLocation :one
INSERT INTO users_locations (
    user_id,
    location, 
    active -- Defines if this location is currently active or not
) VALUES (
    $1, ST_SetSRID(ST_MakePoint($3::double precision, $4::double precision),4326), $2
) RETURNING id, user_id, location, active
`

type CreateUserLocationParams struct {
	UserID    int64   `json:"user_id"`
	Active    bool    `json:"active"`
	Longitude float64 `json:"longitude"`
	Latitude  float64 `json:"latitude"`
}

func (q *Queries) CreateUserLocation(ctx context.Context, arg CreateUserLocationParams) (UsersLocation, error) {
	row := q.db.QueryRowContext(ctx, createUserLocation,
		arg.UserID,
		arg.Active,
		arg.Longitude,
		arg.Latitude,
	)
	var i UsersLocation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Location,
		&i.Active,
	)
	return i, err
}

const getUserByEmailOrUsername = `-- name: GetUserByEmailOrUsername :one
SELECT id, avatar, username, name, email, password, phone, gender, birth_date, created_at, last_login, is_deleted
FROM users
WHERE email = $1 OR username = $2
LIMIT 1
`

type GetUserByEmailOrUsernameParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) GetUserByEmailOrUsername(ctx context.Context, arg GetUserByEmailOrUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailOrUsername, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Avatar,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.LastLogin,
		&i.IsDeleted,
	)
	return i, err
}

const getUserDetails = `-- name: GetUserDetails :one
SELECT u.id, u.username,u.name,u.birth_date,u.gender, u.email, u.avatar, u.last_login, ST_X(ul.location)::double precision AS longitude, ST_Y(ul.location)::double precision AS latitude
FROM users u
LEFT JOIN users_locations ul
    ON u.id = ul.user_id
WHERE ul.active AND u.id = $1
`

type GetUserDetailsRow struct {
	ID        int64          `json:"id"`
	Username  string         `json:"username"`
	Name      sql.NullString `json:"name"`
	BirthDate sql.NullTime   `json:"birth_date"`
	Gender    NullGenders    `json:"gender"`
	Email     string         `json:"email"`
	Avatar    sql.NullString `json:"avatar"`
	LastLogin time.Time      `json:"last_login"`
	Longitude float64        `json:"longitude"`
	Latitude  float64        `json:"latitude"`
}

func (q *Queries) GetUserDetails(ctx context.Context, id int64) (GetUserDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserDetails, id)
	var i GetUserDetailsRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.BirthDate,
		&i.Gender,
		&i.Email,
		&i.Avatar,
		&i.LastLogin,
		&i.Longitude,
		&i.Latitude,
	)
	return i, err
}

const inactiveUserLocation = `-- name: InactiveUserLocation :exec
UPDATE users_locations
SET active = false
WHERE active = true AND user_id = $1
`

func (q *Queries) InactiveUserLocation(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, inactiveUserLocation, userID)
	return err
}

const updateBasicUserDetails = `-- name: UpdateBasicUserDetails :exec
UPDATE users
SET name = $1, gender = $2, birth_date=$3
WHERE ID = $4
`

type UpdateBasicUserDetailsParams struct {
	Name      sql.NullString `json:"name"`
	Gender    NullGenders    `json:"gender"`
	BirthDate sql.NullTime   `json:"birth_date"`
	UserID    int64          `json:"UserID"`
}

func (q *Queries) UpdateBasicUserDetails(ctx context.Context, arg UpdateBasicUserDetailsParams) error {
	_, err := q.db.ExecContext(ctx, updateBasicUserDetails,
		arg.Name,
		arg.Gender,
		arg.BirthDate,
		arg.UserID,
	)
	return err
}

const updateUserLoginTimeByEmail = `-- name: UpdateUserLoginTimeByEmail :one
UPDATE users
SET last_login = $2
WHERE email = $1
RETURNING id, avatar, username, name, email, password, phone, gender, birth_date, created_at, last_login, is_deleted
`

type UpdateUserLoginTimeByEmailParams struct {
	Email     string    `json:"email"`
	LastLogin time.Time `json:"last_login"`
}

func (q *Queries) UpdateUserLoginTimeByEmail(ctx context.Context, arg UpdateUserLoginTimeByEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserLoginTimeByEmail, arg.Email, arg.LastLogin)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Avatar,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.Gender,
		&i.BirthDate,
		&i.CreatedAt,
		&i.LastLogin,
		&i.IsDeleted,
	)
	return i, err
}

const updateUserPasswordByEmail = `-- name: UpdateUserPasswordByEmail :exec
UPDATE users
SET password = $2
WHERE email = $1
`

type UpdateUserPasswordByEmailParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPasswordByEmail(ctx context.Context, arg UpdateUserPasswordByEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPasswordByEmail, arg.Email, arg.Password)
	return err
}
