// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package store

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    password
) VALUES (
    $1,$2,$3
) RETURNING id, avatar, username, name, email, password, phone, created_at, last_login
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Avatar,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByEmailOrUsername = `-- name: GetUserByEmailOrUsername :one
SELECT id, avatar, username, name, email, password, phone, created_at, last_login
FROM users
WHERE email = $1 OR username = $2
LIMIT 1
`

type GetUserByEmailOrUsernameParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) GetUserByEmailOrUsername(ctx context.Context, arg GetUserByEmailOrUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailOrUsername, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Avatar,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const updateUserPasswordByEmail = `-- name: UpdateUserPasswordByEmail :exec
UPDATE users
SET password = $2
WHERE email = $1
`

type UpdateUserPasswordByEmailParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPasswordByEmail(ctx context.Context, arg UpdateUserPasswordByEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPasswordByEmail, arg.Email, arg.Password)
	return err
}
